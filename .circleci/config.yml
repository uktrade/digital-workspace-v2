version: 2
jobs:
  build-and-test:
    docker:
      - image: docker:git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              # py-pip=9.0.0-r1
              make
            # pip install \
            #   docker-compose==1.12.0
      # - restore_cache:
      #     keys:
      #       - v1-{{ .Branch }}
      #     paths:
      #       - /caches/wagtail.tar
      #       - /caches/celery.tar
      #       # - /caches/redis.tar
      #       # - /caches/db.tar
      #       # - /caches/opensearch.tar
      # - run:
      #     name: Load Docker image layer cache
      #     command: |
      #       set +o pipefail
      #       docker load -i /caches/wagtail.tar | true
      #       docker load -i /caches/celery.tar | true
      #       # docker load -i /caches/redis.tar | true
      #       # docker load -i /caches/db.tar | true
      #       # docker load -i /caches/opensearch.tar | true
      - run:
          name: Build custom Docker images
          command: |
            docker build --cache-from=wagtail -t wagtail .
            docker build --cache-from=celery -t celery .
      # - run:
      #     name: Save Docker image layer cache
      #     command: |
      #       mkdir -p /caches
      #       docker save -o /caches/wagtail.tar wagtail
      #       docker save -o /caches/celery.tar celery
      # - save_cache:
      #     key: v1-{{ .Branch }}-{{ epoch }}
      #     paths:
      #       - /caches/wagtail.tar
      #       - /caches/celery.tar
      # - persist_to_workspace:
      #     root: /caches
      #     paths:
      #       - wagtail.tar
      #       - celery.tar
      - run:
          name: Run containers
          command: |
            docker-compose -f ./docker-compose.yml up -d
      - run:
          name: check for missing migrations
          command: make checkmigrations
      - run:
          name: Check for fixme comments
          command: make check-fixme
      - run:
          name: run black (code formatting check)
          command: make black-check
      - run:
          name: run isort
          command: make isort-check
      - run:
          name: run flake8 (coding standards compliance test)
          command: make flake8
      - run:
          name: run unit tests
          command: make test
      - run:
          name: Publish unit test coverage
          command: |
            wget -O codecov.sh https://codecov.io/bash
            bash ./codecov.sh -t ${CODECOV_TOKEN} -s test-reports -f "*.xml"
  e2e-tests:
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build custom Docker images
          command: |
            docker build --cache-from=wagtail -t wagtail .
            docker build --cache-from=celery -t celery .
      - run:
          name: run containers
          command: docker-compose --profile selenium up -d
      - run:
          name: run e2e tests
          command: make test-selenium
      - run:
          name: Publish e2e test coverage
          command: |
            wget -O codecov.sh https://codecov.io/bash
            bash ./codecov.sh -t ${CODECOV_TOKEN} -s test-reports -f "*.xml"

workflows:
  version: 2
  build_and_test:
    jobs:
      - build-and-test
      - e2e-tests:
          filters:
            branches:
              only:
                - main
                - master
          requires:
            - build-and-test
