from wagtail import blocks

from content import blocks as content_blocks
from core.models.tags import Tag, TaggedPage


def get_tag_choices():
    return [(tag.slug, tag.name) for tag in Tag.objects.all()]


def get_ordering_choices():
    return [
        ("-content_object__last_published_at", "Last updated"),
        ("content_object__title", "Alphabetical"),
        ("-content_object__first_published_at", "Published date (ascending)"),
        ("content_object__first_published_at", "Published date (decending)"),
    ]


class TaggedPageListBlock(blocks.StructBlock):
    title = content_blocks.HeadingBlock(
        label="Title",
        icon="title",
        classname="full title",
        max_length=30,
    )
    description = blocks.CharBlock(required=False, max_length=70)
    tag = blocks.ChoiceBlock(label="Tag", choices=get_tag_choices, required=True)
    ordering_choice = blocks.ChoiceBlock(
        label="Ordering",
        choices=get_ordering_choices,
        required=True,
        default="pub_date",
    )

    class Meta:
        template = "dwds/new/components/link_list.html"
        label = "Tagged content list"
        help_text = "Autogenerated list of links based on selected tag"
        icon = "tag"

    def get_context(self, value, parent_context=None):
        ordering = value["ordering_choice"] or "-content_object__last_published_at"
        context = parent_context or {}

        # Query tag via slug, return nothing if not found
        tag = Tag._default_manager.all().get(slug=value["tag"])
        if tag:
            pages = (
                TaggedPage.objects.filter(tag=tag)
                .filter(content_object__live=True)
                .select_related("content_object")
                .order_by(ordering)
                .all()
            )
        else:
            pages = ()

        context.update(
            title=value["title"],
            description=value["description"],
            list=[
                {"url": page.content_object.url, "text": page.content_object.title}
                for page in pages
            ],
        )
        return context


class CustomPageLinkListBlock(blocks.StructBlock):
    class Meta:
        template = "dwds/new/components/link_list.html"
        label = "Link list"
        help_text = "List of links to specific pages"

    title = content_blocks.HeadingBlock(
        label="Title",
        icon="title",
        classname="full title",
        max_length=30,
    )
    description = blocks.CharBlock(required=False, max_length=70)
    pages = blocks.ListBlock(blocks.PageChooserBlock(label="Page"))

    def get_context(self, value, parent_context=None):
        context = parent_context or {}
        context.update(
            title=value["title"],
            description=value["description"],
            list=[
                {"url": page.get_url(), "text": page.title} for page in value["pages"]
            ],
        )
        return context
