# Generated by Django 3.0.7 on 2020-10-29 09:07

import content.blocks
from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("wagtailcore", "0045_assign_unlock_grouppagepermission"),
        ("user", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BasePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "legacy_path",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="SearchKeywordOrPhrase",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("keyword_or_phrase", models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name="Theme",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("slug", models.SlugField(max_length=255)),
                ("summary", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="ContentPage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.BasePage",
                    ),
                ),
                ("search_title", models.CharField(max_length=255)),
                (
                    "legacy_guid",
                    models.CharField(
                        blank=True,
                        help_text="Wordpress GUID",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "legacy_content",
                    models.TextField(
                        blank=True,
                        help_text="Legacy content, pre-conversion",
                        null=True,
                    ),
                ),
                (
                    "body",
                    wagtail.core.fields.StreamField(
                        [
                            ("heading2", content.blocks.Heading2Block()),
                            ("heading3", content.blocks.Heading3Block()),
                            (
                                "text_section",
                                content.blocks.TextBlock(
                                    blank=True,
                                    features=[
                                        "bold",
                                        "italic",
                                        "ol",
                                        "ul",
                                        "link",
                                        "document-link",
                                    ],
                                    help_text="Some text to describe what this section is about (will be\n            displayed above the list of child pages)",
                                ),
                            ),
                            (
                                "image",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "isdecorative",
                                            wagtail.core.blocks.BooleanBlock(
                                                help_text="\n        Tick if this image is entirely decorative and does not include\n        important content. This will hide the image from users using\n        screen readers.\n        ",
                                                label="Is this a decorative image?",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "alt",
                                            wagtail.core.blocks.CharBlock(
                                                help_text="\n        Read out by screen readers or displayed if an image does not load\n        or if images have been switched off.\n\n        Unless this is a decorative image, it MUST have alt text that\n        tells people what information the image provides, describes its\n        content and function, and is specific, meaningful and concise.\n        ",
                                                label="Alt text",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.core.blocks.CharBlock(
                                                help_text="\n        Optional text displayed under the image on the page to provide\n        context.\n        ",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "internal_media",
                                wagtail.core.blocks.StructBlock(
                                    [("media_file", content.blocks.MediaChooserBlock())]
                                ),
                            ),
                            (
                                "data_table",
                                content.blocks.DataTableBlock(
                                    help_text="ONLY USE THIS FOR TABLULAR DATA, NOT FOR FORMATTING"
                                ),
                            ),
                        ]
                    ),
                ),
                (
                    "pinned_phrases",
                    models.CharField(
                        blank=True,
                        help_text="Pinned keywords and phrases",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "excluded_phrases",
                    models.CharField(
                        blank=True,
                        help_text="Excluded keywords and phrases",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("body_no_html", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("content.basepage",),
        ),
        migrations.CreateModel(
            name="SearchPinPageLookUp",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
                (
                    "search_keyword_or_phrase",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.SearchKeywordOrPhrase",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SearchExclusionPageLookUp",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
                (
                    "search_keyword_or_phrase",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.SearchKeywordOrPhrase",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PrivacyPolicy",
            fields=[
                (
                    "contentpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.ContentPage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("content.contentpage",),
        ),
        migrations.CreateModel(
            name="PrivacyPolicyHome",
            fields=[
                (
                    "contentpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.ContentPage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("content.contentpage",),
        ),
    ]
